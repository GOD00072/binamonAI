import React, { useState } from 'react';
import { Form, Button, Card, Row, Col, Spinner, Alert } from 'react-bootstrap';
import { knowledgeApi } from '../services/api';

// ‡πÅ‡∏õ‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
const LANGUAGES = [
  { code: 'TH', name: 'üáπüá≠ ‡πÑ‡∏ó‡∏¢' },
  { code: 'EN', name: 'üá¨üáß ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' },
  { code: 'CN', name: 'üá®üá≥ ‡∏à‡∏µ‡∏ô' },
  { code: 'KR', name: 'üá∞üá∑ ‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ' },
  { code: 'JP', name: 'üáØüáµ ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô' },
];

const KnowledgeUploadPage: React.FC = () => {
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const [file, setFile] = useState<File | null>(null);
  const [fileForm, setFileForm] = useState({ language: 'TH', category: '', customName: '', description: '', tags: '' });
  const [fileLoading, setFileLoading] = useState(false);
  const [fileResult, setFileResult] = useState<{ success: boolean; message: string } | null>(null);
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  const [textForm, setTextForm] = useState({ language: 'TH', category: '', file_name: '', text: '', tags: '' });
  const [textLoading, setTextLoading] = useState(false);
  const [textResult, setTextResult] = useState<{ success: boolean; message: string } | null>(null);
  
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFile(e.target.files[0]);
    }
  };

  const handleFileUpload = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!file || !fileForm.category || !fileForm.customName) {
      setFileResult({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏©‡∏≤, ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£' });
      return;
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('language', fileForm.language);
    formData.append('category', fileForm.category);
    formData.append('customName', fileForm.customName);
    formData.append('description', fileForm.description);
    formData.append('tags', fileForm.tags);

    setFileLoading(true);
    setFileResult(null);
    try {
      const response = await knowledgeApi.uploadFile(formData);
      if (response.success) {
                 setFileResult({ success: true, message: `‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${response.data.chunks} ‡∏™‡πà‡∏ß‡∏ô` });      } else {
        setFileResult({ success: false, message: response.error || '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' });
      }
    } catch (error: any) {
      setFileResult({ success: false, message: error.response?.data?.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    } finally {
      setFileLoading(false);
    }
  };

  const handleTextAdd = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!textForm.category || !textForm.file_name || !textForm.text) {
      setTextResult({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏©‡∏≤, ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà, ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤' });
      return;
    }

    setTextLoading(true);
    setTextResult(null);
    try {
      const response = await knowledgeApi.addText(textForm);
      if (response.success) {
                 setTextResult({ success: true, message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏°‡∏µ ${response.data.chunks} ‡∏™‡πà‡∏ß‡∏ô` });      } else {
        setTextResult({ success: false, message: response.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ' });
      }
    } catch (error: any) {
      setTextResult({ success: false, message: error.response?.data?.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
    } finally {
      setTextLoading(false);
    }
  };
  
  const headerStyle = {
    backgroundColor: '#312783',
    color: '#FFFFFF'
  };

  const buttonStyle = {
    backgroundColor: '#EF7D00',
    borderColor: '#EF7D00',
  };

  return (
    <div>
       <h2 style={{color: '#312783'}} className="mb-4"><i className="fas fa-plus-circle me-2"></i>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà</h2>
       <Row>
         <Col md={6}>
           <Card>
             <Card.Header as="h5" style={headerStyle}>
               <i className="fas fa-file-upload me-2"></i>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
             </Card.Header>
             <Card.Body>
                <Form onSubmit={handleFileUpload}>
                   <Form.Group className="mb-3">
                     <Form.Label>‡∏†‡∏≤‡∏©‡∏≤</Form.Label>
                     <Form.Select value={fileForm.language} onChange={e => setFileForm({...fileForm, language: e.target.value})}>
                       {LANGUAGES.map(lang => <option key={lang.code} value={lang.code}>{lang.name}</option>)}
                     </Form.Select>
                   </Form.Group>
                   <Form.Group className="mb-3">
                     <Form.Label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Form.Label>
                     <Form.Control type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢" required value={fileForm.category} onChange={e => setFileForm({...fileForm, category: e.target.value})} />
                   </Form.Group>
                   <Form.Group className="mb-3">
                     <Form.Label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</Form.Label>
                     <Form.Control type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ" required value={fileForm.customName} onChange={e => setFileForm({...fileForm, customName: e.target.value})} />
                   </Form.Group>
                   <Form.Group className="mb-3">
                     <Form.Label>‡πÑ‡∏ü‡∏•‡πå</Form.Label>
                     <Form.Control type="file" required onChange={handleFileChange} accept=".txt,.pdf,.doc,.docx" />
                     <Form.Text>‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: .txt, .pdf, .doc, .docx</Form.Text>
                   </Form.Group>
                    <Form.Group className="mb-3">
                     <Form.Label>‡πÅ‡∏ó‡πá‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)</Form.Label>
                     <Form.Control type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô, v2" value={fileForm.tags} onChange={e => setFileForm({...fileForm, tags: e.target.value})} />
                   </Form.Group>
                   <Button variant="primary" type="submit" disabled={fileLoading} style={buttonStyle}>
                     {fileLoading ? <><Spinner as="span" animation="border" size="sm" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...</> : '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
                   </Button>
                 </Form>
                 {fileResult && <Alert variant={fileResult.success ? 'success' : 'danger'} className="mt-3">{fileResult.message}</Alert>}
             </Card.Body>
           </Card>
         </Col>
         <Col md={6}>
           <Card>
             <Card.Header as="h5" style={headerStyle}>
               <i className="fas fa-paste me-2"></i>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
             </Card.Header>
             <Card.Body>
               <Form onSubmit={handleTextAdd}>
                  <Form.Group className="mb-3">
                     <Form.Label>‡∏†‡∏≤‡∏©‡∏≤</Form.Label>
                     <Form.Select value={textForm.language} onChange={e => setTextForm({...textForm, language: e.target.value})}>
                       {LANGUAGES.map(lang => <option key={lang.code} value={lang.code}>{lang.name}</option>)}
                     </Form.Select>
                   </Form.Group>
                  <Form.Group className="mb-3">
                     <Form.Label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</Form.Label>
                     <Form.Control type="text" placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏ô‡πâ‡∏ï‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß" required value={textForm.category} onChange={e => setTextForm({...textForm, category: e.target.value})} />
                   </Form.Group>
                   <Form.Group className="mb-3">
                     <Form.Label>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)</Form.Label>
                     <Form.Control type="text" placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ" required value={textForm.file_name} onChange={e => setTextForm({...textForm, file_name: e.target.value})} />
                   </Form.Group>
                   <Form.Group className="mb-3">
                     <Form.Label>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤</Form.Label>
                     <Form.Control as="textarea" rows={5} required value={textForm.text} onChange={e => setTextForm({...textForm, text: e.target.value})} />
                   </Form.Group>
                   <Button variant="primary" type="submit" disabled={textLoading} style={buttonStyle}>
                     {textLoading ? <><Spinner as="span" animation="border" size="sm" /> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...</> : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ'}
                   </Button>
               </Form>
               {textResult && <Alert variant={textResult.success ? 'success' : 'danger'} className="mt-3">{textResult.message}</Alert>}
             </Card.Body>
           </Card>
         </Col>
       </Row>
    </div>
  );
};

export default KnowledgeUploadPage;